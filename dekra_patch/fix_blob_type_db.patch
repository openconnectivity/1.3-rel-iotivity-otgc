diff --git a/resource/csdk/security/provisioning/src/provisioningdatabasemanager.c b/resource/csdk/security/provisioning/src/provisioningdatabasemanager.c
index d80b657..f46be8d 100644
--- a/resource/csdk/security/provisioning/src/provisioningdatabasemanager.c
+++ b/resource/csdk/security/provisioning/src/provisioningdatabasemanager.c
@@ -45,7 +45,7 @@
 #define PDM_BIND_INDEX_THIRD 3
 
 #define PDM_CREATE_T_DEVICE_LIST "create table T_DEVICE_LIST(ID INTEGER PRIMARY KEY AUTOINCREMENT,\
-                                  UUID BLOB NOT NULL UNIQUE, STATE INT NOT NULL);"
+                                  UUID TEXT NOT NULL UNIQUE, STATE INT NOT NULL);"
 
 #define PDM_CREATE_T_DEVICE_LINK  "create table T_DEVICE_LINK_STATE(ID INT NOT NULL, ID2 INT NOT \
                                    NULL,STATE INT NOT NULL, PRIMARY KEY (ID, ID2));"
@@ -276,7 +276,7 @@ OCStackResult PDMAddDevice(const OicUuid_t *UUID)
                               PDM_SQLITE_INSERT_T_DEVICE_LIST_SIZE, &stmt, NULL);
     PDM_VERIFY_SQLITE_OK(TAG, res, ERROR, OC_STACK_ERROR);
 
-    res = sqlite3_bind_blob(stmt, PDM_BIND_INDEX_SECOND, UUID, UUID_LENGTH, SQLITE_STATIC);
+    res = sqlite3_bind_text(stmt, PDM_BIND_INDEX_SECOND, (char*)UUID, UUID_LENGTH, SQLITE_STATIC);
     PDM_VERIFY_SQLITE_OK(TAG, res, ERROR, OC_STACK_ERROR);
 
     res = sqlite3_bind_int(stmt, PDM_BIND_INDEX_THIRD, PDM_DEVICE_INIT);
@@ -315,7 +315,7 @@ static OCStackResult getIdForUUID(const OicUuid_t *UUID , int *id)
                              &stmt, NULL);
     PDM_VERIFY_SQLITE_OK(TAG, res, ERROR, OC_STACK_ERROR);
 
-    res = sqlite3_bind_blob(stmt, PDM_BIND_INDEX_FIRST, UUID, UUID_LENGTH, SQLITE_STATIC);
+    res = sqlite3_bind_text(stmt, PDM_BIND_INDEX_FIRST, (char*)UUID, UUID_LENGTH, SQLITE_STATIC);
     PDM_VERIFY_SQLITE_OK(TAG, res, ERROR, OC_STACK_ERROR);
 
     OIC_LOG(DEBUG, TAG, "Binding Done");
@@ -332,79 +332,6 @@ static OCStackResult getIdForUUID(const OicUuid_t *UUID , int *id)
     return OC_STACK_INVALID_PARAM;
 }
 
-static OCStackResult removeFromDeviceList(int id)
-{
-    OIC_LOG_V(DEBUG, TAG, "IN %s", __func__);
-
-    sqlite3_stmt *stmt = 0;
-    int res = 0;
-    res = sqlite3_prepare_v2(g_db, PDM_SQLITE_DELETE_DEVICE,
-                              PDM_SQLITE_DELETE_DEVICE_SIZE, &stmt, NULL);
-    PDM_VERIFY_SQLITE_OK(TAG, res, ERROR, OC_STACK_ERROR);
-
-    res = sqlite3_bind_int(stmt, PDM_BIND_INDEX_FIRST, id);
-    PDM_VERIFY_SQLITE_OK(TAG, res, ERROR, OC_STACK_ERROR);
-
-    if (sqlite3_step(stmt) != SQLITE_DONE)
-    {
-        OIC_LOG_V(ERROR, TAG, "Error message: %s", sqlite3_errmsg(g_db));
-        sqlite3_finalize(stmt);
-        return OC_STACK_ERROR;
-    }
-    sqlite3_finalize(stmt);
-    OIC_LOG_V(DEBUG, TAG, "OUT %s", __func__);
-    return OC_STACK_OK;
-}
-
-OCStackResult PDMUpdateUuid(const OicUuid_t* oldUuid, const OicUuid_t* newUuid)
-{
-    OIC_LOG_V(DEBUG, TAG, "IN %s", __func__);
-
-    if (NULL == oldUuid || NULL == newUuid)
-    {
-        return OC_STACK_INVALID_PARAM;
-    }
-    
-    // Check if newUuid exists
-    int id = 0;
-	if (OC_STACK_OK == getIdForUUID(newUuid, &id))
-    {
-        // if exists delete it
-        begin();
-		if(OC_STACK_OK != removeFromDeviceList(id))
-		{
-		    rollback();
-		    OIC_LOG(ERROR, TAG, "Requested value not found");
-		    return OC_STACK_ERROR;
-		}
-		commit();
-    }
-
-    sqlite3_stmt *stmt = 0;
-    int res = 0;
-    res = sqlite3_prepare_v2(g_db, PDM_SQLITE_UPDATE_UUID,
-                             PDM_SQLITE_UPDATE_UUID_SIZE, &stmt, NULL);
-    PDM_VERIFY_SQLITE_OK(TAG, res, ERROR, OC_STACK_ERROR);
-
-    res = sqlite3_bind_blob(stmt, PDM_BIND_INDEX_FIRST, newUuid, UUID_LENGTH, SQLITE_STATIC);
-    PDM_VERIFY_SQLITE_OK(TAG, res, ERROR, OC_STACK_ERROR);
-
-    res = sqlite3_bind_blob(stmt, PDM_BIND_INDEX_SECOND, oldUuid, UUID_LENGTH, SQLITE_STATIC);
-    PDM_VERIFY_SQLITE_OK(TAG, res, ERROR, OC_STACK_ERROR);
-
-    if (SQLITE_DONE != sqlite3_step(stmt))
-    {
-        OIC_LOG_V(ERROR, TAG, "Error message: %s", sqlite3_errmsg(g_db));
-        sqlite3_finalize(stmt);
-        return OC_STACK_ERROR;
-    }
-    sqlite3_finalize(stmt);
-    OIC_LOG_V(DEBUG, TAG, "OUT %s", __func__);
-    return OC_STACK_OK;
-}
-
-
-
 /**
  * Function to check duplication of device's Device ID.
  */
@@ -424,7 +351,7 @@ OCStackResult PDMIsDuplicateDevice(const OicUuid_t* UUID, bool *result)
                              &stmt, NULL);
     PDM_VERIFY_SQLITE_OK(TAG, res, ERROR, OC_STACK_ERROR);
 
-    res = sqlite3_bind_blob(stmt, PDM_BIND_INDEX_FIRST, UUID, UUID_LENGTH, SQLITE_STATIC);
+    res = sqlite3_bind_text(stmt, PDM_BIND_INDEX_FIRST, (char*)UUID, UUID_LENGTH, SQLITE_STATIC);
     PDM_VERIFY_SQLITE_OK(TAG, res, ERROR, OC_STACK_ERROR);
 
     OIC_LOG(DEBUG, TAG, "Binding Done");
@@ -587,6 +514,30 @@ OCStackResult PDMUnlinkDevices(const OicUuid_t *UUID1, const OicUuid_t *UUID2)
     return removeLink(id1, id2);
 }
 
+static OCStackResult removeFromDeviceList(int id)
+{
+    OIC_LOG_V(DEBUG, TAG, "IN %s", __func__);
+
+    sqlite3_stmt *stmt = 0;
+    int res = 0;
+    res = sqlite3_prepare_v2(g_db, PDM_SQLITE_DELETE_DEVICE,
+                              PDM_SQLITE_DELETE_DEVICE_SIZE, &stmt, NULL);
+    PDM_VERIFY_SQLITE_OK(TAG, res, ERROR, OC_STACK_ERROR);
+
+    res = sqlite3_bind_int(stmt, PDM_BIND_INDEX_FIRST, id);
+    PDM_VERIFY_SQLITE_OK(TAG, res, ERROR, OC_STACK_ERROR);
+
+    if (sqlite3_step(stmt) != SQLITE_DONE)
+    {
+        OIC_LOG_V(ERROR, TAG, "Error message: %s", sqlite3_errmsg(g_db));
+        sqlite3_finalize(stmt);
+        return OC_STACK_ERROR;
+    }
+    sqlite3_finalize(stmt);
+    OIC_LOG_V(DEBUG, TAG, "OUT %s", __func__);
+    return OC_STACK_OK;
+}
+
 OCStackResult PDMDeleteDevice(const OicUuid_t *UUID)
 {
     OIC_LOG_V(DEBUG, TAG, "IN %s", __func__);
@@ -693,7 +644,7 @@ OCStackResult PDMGetOwnedDevices(OCUuidList_t **uuidList, size_t *numOfDevices)
     size_t counter  = 0;
     while (SQLITE_ROW == sqlite3_step(stmt))
     {
-        const void *ptr = sqlite3_column_blob(stmt, PDM_FIRST_INDEX);
+        const void *ptr = sqlite3_column_text(stmt, PDM_FIRST_INDEX);
         OicUuid_t *uid = (OicUuid_t *)ptr;
         OCUuidList_t *temp = (OCUuidList_t *) OICCalloc(1,sizeof(OCUuidList_t));
         if (NULL == temp)
@@ -727,7 +678,7 @@ static OCStackResult getUUIDforId(int id, OicUuid_t *uid, bool *result)
 
     while (SQLITE_ROW == sqlite3_step(stmt))
     {
-        const void *ptr = sqlite3_column_blob(stmt, PDM_FIRST_INDEX);
+        const void *ptr = sqlite3_column_text(stmt, PDM_FIRST_INDEX);
         memcpy(uid, ptr, sizeof(OicUuid_t));
 
         int temp = sqlite3_column_int(stmt, PDM_SECOND_INDEX);
@@ -896,6 +847,54 @@ OCStackResult PDMClose()
     return OC_STACK_OK;
 }
 
+OCStackResult PDMUpdateUuid(const OicUuid_t* oldUuid, const OicUuid_t* newUuid)
+{
+    OIC_LOG_V(DEBUG, TAG, "IN %s", __func__);
+
+    if (NULL == oldUuid || NULL == newUuid)
+    {
+        return OC_STACK_INVALID_PARAM;
+    }
+    
+    // Check if newUuid exists
+    int id = 0;
+	if (OC_STACK_OK == getIdForUUID(newUuid, &id))
+    {
+        // if exists delete it
+        begin();
+		if(OC_STACK_OK != removeFromDeviceList(id))
+		{
+		    rollback();
+		    OIC_LOG(ERROR, TAG, "Requested value not found");
+		    return OC_STACK_ERROR;
+		}
+		commit();
+    }
+
+	// Update 
+    sqlite3_stmt *stmt = 0;
+    int res = 0;
+    res = sqlite3_prepare_v2(g_db, PDM_SQLITE_UPDATE_UUID,
+                             PDM_SQLITE_UPDATE_UUID_SIZE, &stmt, NULL);
+    PDM_VERIFY_SQLITE_OK(TAG, res, ERROR, OC_STACK_ERROR);
+
+    res = sqlite3_bind_text(stmt, PDM_BIND_INDEX_FIRST, (char*)newUuid, UUID_LENGTH, SQLITE_STATIC);
+    PDM_VERIFY_SQLITE_OK(TAG, res, ERROR, OC_STACK_ERROR);
+
+    res = sqlite3_bind_text(stmt, PDM_BIND_INDEX_SECOND, (char*)oldUuid, UUID_LENGTH, SQLITE_STATIC);
+    PDM_VERIFY_SQLITE_OK(TAG, res, ERROR, OC_STACK_ERROR);
+
+    if (SQLITE_DONE != sqlite3_step(stmt))
+    {
+        OIC_LOG_V(ERROR, TAG, "Error message: %s", sqlite3_errmsg(g_db));
+        sqlite3_finalize(stmt);
+        return OC_STACK_ERROR;
+    }
+    sqlite3_finalize(stmt);
+    OIC_LOG_V(DEBUG, TAG, "OUT %s", __func__);
+    return OC_STACK_OK;
+}
+
 void PDMDestoryOicUuidLinkList(OCUuidList_t* ptr)
 {
     OIC_LOG_V(DEBUG, TAG, "IN %s", __func__);
@@ -1017,7 +1016,7 @@ static OCStackResult updateDeviceState(const OicUuid_t *uuid, PdmDeviceState_t s
     res = sqlite3_bind_int(stmt, PDM_BIND_INDEX_FIRST, state);
     PDM_VERIFY_SQLITE_OK(TAG, res, ERROR, OC_STACK_ERROR);
 
-    res = sqlite3_bind_blob(stmt, PDM_BIND_INDEX_SECOND, uuid, UUID_LENGTH, SQLITE_STATIC);
+    res = sqlite3_bind_text(stmt, PDM_BIND_INDEX_SECOND, (char*)uuid, UUID_LENGTH, SQLITE_STATIC);
     PDM_VERIFY_SQLITE_OK(TAG, res, ERROR, OC_STACK_ERROR);
 
     if (SQLITE_DONE != sqlite3_step(stmt))
@@ -1120,7 +1119,7 @@ OCStackResult PDMGetDeviceState(const OicUuid_t *uuid, PdmDeviceState_t* result)
                               &stmt, NULL);
     PDM_VERIFY_SQLITE_OK(TAG, res, ERROR, OC_STACK_ERROR);
 
-    res = sqlite3_bind_blob(stmt, PDM_BIND_INDEX_FIRST, uuid, UUID_LENGTH, SQLITE_STATIC);
+    res = sqlite3_bind_text(stmt, PDM_BIND_INDEX_FIRST, (char*)uuid, UUID_LENGTH, SQLITE_STATIC);
     PDM_VERIFY_SQLITE_OK(TAG, res, ERROR, OC_STACK_ERROR);
 
     *result = PDM_DEVICE_UNKNOWN;
